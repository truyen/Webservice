//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.17929
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Winform.ServiceDonHang {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DonHang", Namespace="http://schemas.datacontract.org/2004/07/WcfService")]
    [System.SerializableAttribute()]
    public partial class DonHang : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool activeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool dagiaohangField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int idField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string kh_diachiField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string kh_emailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string kh_sdtField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string kh_tenField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime ngayField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int tongtienField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool active {
            get {
                return this.activeField;
            }
            set {
                if ((this.activeField.Equals(value) != true)) {
                    this.activeField = value;
                    this.RaisePropertyChanged("active");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool dagiaohang {
            get {
                return this.dagiaohangField;
            }
            set {
                if ((this.dagiaohangField.Equals(value) != true)) {
                    this.dagiaohangField = value;
                    this.RaisePropertyChanged("dagiaohang");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int id {
            get {
                return this.idField;
            }
            set {
                if ((this.idField.Equals(value) != true)) {
                    this.idField = value;
                    this.RaisePropertyChanged("id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string kh_diachi {
            get {
                return this.kh_diachiField;
            }
            set {
                if ((object.ReferenceEquals(this.kh_diachiField, value) != true)) {
                    this.kh_diachiField = value;
                    this.RaisePropertyChanged("kh_diachi");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string kh_email {
            get {
                return this.kh_emailField;
            }
            set {
                if ((object.ReferenceEquals(this.kh_emailField, value) != true)) {
                    this.kh_emailField = value;
                    this.RaisePropertyChanged("kh_email");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string kh_sdt {
            get {
                return this.kh_sdtField;
            }
            set {
                if ((object.ReferenceEquals(this.kh_sdtField, value) != true)) {
                    this.kh_sdtField = value;
                    this.RaisePropertyChanged("kh_sdt");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string kh_ten {
            get {
                return this.kh_tenField;
            }
            set {
                if ((object.ReferenceEquals(this.kh_tenField, value) != true)) {
                    this.kh_tenField = value;
                    this.RaisePropertyChanged("kh_ten");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime ngay {
            get {
                return this.ngayField;
            }
            set {
                if ((this.ngayField.Equals(value) != true)) {
                    this.ngayField = value;
                    this.RaisePropertyChanged("ngay");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int tongtien {
            get {
                return this.tongtienField;
            }
            set {
                if ((this.tongtienField.Equals(value) != true)) {
                    this.tongtienField = value;
                    this.RaisePropertyChanged("tongtien");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceDonHang.IServiceDonHang")]
    public interface IServiceDonHang {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceDonHang/findAll", ReplyAction="http://tempuri.org/IServiceDonHang/findAllResponse")]
        Winform.ServiceDonHang.DonHang[] findAll();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceDonHang/findAll", ReplyAction="http://tempuri.org/IServiceDonHang/findAllResponse")]
        System.Threading.Tasks.Task<Winform.ServiceDonHang.DonHang[]> findAllAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceDonHang/find", ReplyAction="http://tempuri.org/IServiceDonHang/findResponse")]
        Winform.ServiceDonHang.DonHang find(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceDonHang/find", ReplyAction="http://tempuri.org/IServiceDonHang/findResponse")]
        System.Threading.Tasks.Task<Winform.ServiceDonHang.DonHang> findAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceDonHang/insert", ReplyAction="http://tempuri.org/IServiceDonHang/insertResponse")]
        bool insert(System.DateTime ngay, int tongtien, bool dagiaohang, bool active, string kh_ten, string kh_diachi, string kh_email, string kh_sodt);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceDonHang/insert", ReplyAction="http://tempuri.org/IServiceDonHang/insertResponse")]
        System.Threading.Tasks.Task<bool> insertAsync(System.DateTime ngay, int tongtien, bool dagiaohang, bool active, string kh_ten, string kh_diachi, string kh_email, string kh_sodt);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceDonHang/delete", ReplyAction="http://tempuri.org/IServiceDonHang/deleteResponse")]
        bool delete(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceDonHang/delete", ReplyAction="http://tempuri.org/IServiceDonHang/deleteResponse")]
        System.Threading.Tasks.Task<bool> deleteAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceDonHang/update", ReplyAction="http://tempuri.org/IServiceDonHang/updateResponse")]
        bool update(int id, System.DateTime ngay, int tongtien, bool dagiaohang, bool active, string kh_ten, string kh_diachi, string kh_email, string kh_sodt);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceDonHang/update", ReplyAction="http://tempuri.org/IServiceDonHang/updateResponse")]
        System.Threading.Tasks.Task<bool> updateAsync(int id, System.DateTime ngay, int tongtien, bool dagiaohang, bool active, string kh_ten, string kh_diachi, string kh_email, string kh_sodt);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceDonHangChannel : Winform.ServiceDonHang.IServiceDonHang, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceDonHangClient : System.ServiceModel.ClientBase<Winform.ServiceDonHang.IServiceDonHang>, Winform.ServiceDonHang.IServiceDonHang {
        
        public ServiceDonHangClient() {
        }
        
        public ServiceDonHangClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ServiceDonHangClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceDonHangClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceDonHangClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public Winform.ServiceDonHang.DonHang[] findAll() {
            return base.Channel.findAll();
        }
        
        public System.Threading.Tasks.Task<Winform.ServiceDonHang.DonHang[]> findAllAsync() {
            return base.Channel.findAllAsync();
        }
        
        public Winform.ServiceDonHang.DonHang find(int id) {
            return base.Channel.find(id);
        }
        
        public System.Threading.Tasks.Task<Winform.ServiceDonHang.DonHang> findAsync(int id) {
            return base.Channel.findAsync(id);
        }
        
        public bool insert(System.DateTime ngay, int tongtien, bool dagiaohang, bool active, string kh_ten, string kh_diachi, string kh_email, string kh_sodt) {
            return base.Channel.insert(ngay, tongtien, dagiaohang, active, kh_ten, kh_diachi, kh_email, kh_sodt);
        }
        
        public System.Threading.Tasks.Task<bool> insertAsync(System.DateTime ngay, int tongtien, bool dagiaohang, bool active, string kh_ten, string kh_diachi, string kh_email, string kh_sodt) {
            return base.Channel.insertAsync(ngay, tongtien, dagiaohang, active, kh_ten, kh_diachi, kh_email, kh_sodt);
        }
        
        public bool delete(int id) {
            return base.Channel.delete(id);
        }
        
        public System.Threading.Tasks.Task<bool> deleteAsync(int id) {
            return base.Channel.deleteAsync(id);
        }
        
        public bool update(int id, System.DateTime ngay, int tongtien, bool dagiaohang, bool active, string kh_ten, string kh_diachi, string kh_email, string kh_sodt) {
            return base.Channel.update(id, ngay, tongtien, dagiaohang, active, kh_ten, kh_diachi, kh_email, kh_sodt);
        }
        
        public System.Threading.Tasks.Task<bool> updateAsync(int id, System.DateTime ngay, int tongtien, bool dagiaohang, bool active, string kh_ten, string kh_diachi, string kh_email, string kh_sodt) {
            return base.Channel.updateAsync(id, ngay, tongtien, dagiaohang, active, kh_ten, kh_diachi, kh_email, kh_sodt);
        }
    }
}
