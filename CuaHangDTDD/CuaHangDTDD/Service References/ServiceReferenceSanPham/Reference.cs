//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.17929
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CuaHangDTDD.ServiceReferenceSanPham {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SanPham", Namespace="http://schemas.datacontract.org/2004/07/WcfService")]
    [System.SerializableAttribute()]
    public partial class SanPham : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private CuaHangDTDD.ServiceReferenceSanPham.HangSX HangSXField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool activeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int giaField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> hangsx_idField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int idField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string maspField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string motaField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string tenField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public CuaHangDTDD.ServiceReferenceSanPham.HangSX HangSX {
            get {
                return this.HangSXField;
            }
            set {
                if ((object.ReferenceEquals(this.HangSXField, value) != true)) {
                    this.HangSXField = value;
                    this.RaisePropertyChanged("HangSX");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool active {
            get {
                return this.activeField;
            }
            set {
                if ((this.activeField.Equals(value) != true)) {
                    this.activeField = value;
                    this.RaisePropertyChanged("active");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int gia {
            get {
                return this.giaField;
            }
            set {
                if ((this.giaField.Equals(value) != true)) {
                    this.giaField = value;
                    this.RaisePropertyChanged("gia");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> hangsx_id {
            get {
                return this.hangsx_idField;
            }
            set {
                if ((this.hangsx_idField.Equals(value) != true)) {
                    this.hangsx_idField = value;
                    this.RaisePropertyChanged("hangsx_id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int id {
            get {
                return this.idField;
            }
            set {
                if ((this.idField.Equals(value) != true)) {
                    this.idField = value;
                    this.RaisePropertyChanged("id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string masp {
            get {
                return this.maspField;
            }
            set {
                if ((object.ReferenceEquals(this.maspField, value) != true)) {
                    this.maspField = value;
                    this.RaisePropertyChanged("masp");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string mota {
            get {
                return this.motaField;
            }
            set {
                if ((object.ReferenceEquals(this.motaField, value) != true)) {
                    this.motaField = value;
                    this.RaisePropertyChanged("mota");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ten {
            get {
                return this.tenField;
            }
            set {
                if ((object.ReferenceEquals(this.tenField, value) != true)) {
                    this.tenField = value;
                    this.RaisePropertyChanged("ten");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="HangSX", Namespace="http://schemas.datacontract.org/2004/07/WcfService")]
    [System.SerializableAttribute()]
    public partial class HangSX : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool activeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int idField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string tenField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool active {
            get {
                return this.activeField;
            }
            set {
                if ((this.activeField.Equals(value) != true)) {
                    this.activeField = value;
                    this.RaisePropertyChanged("active");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int id {
            get {
                return this.idField;
            }
            set {
                if ((this.idField.Equals(value) != true)) {
                    this.idField = value;
                    this.RaisePropertyChanged("id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ten {
            get {
                return this.tenField;
            }
            set {
                if ((object.ReferenceEquals(this.tenField, value) != true)) {
                    this.tenField = value;
                    this.RaisePropertyChanged("ten");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReferenceSanPham.IServiceSanPham")]
    public interface IServiceSanPham {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceSanPham/findAll", ReplyAction="http://tempuri.org/IServiceSanPham/findAllResponse")]
        CuaHangDTDD.ServiceReferenceSanPham.SanPham[] findAll();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceSanPham/findAll", ReplyAction="http://tempuri.org/IServiceSanPham/findAllResponse")]
        System.Threading.Tasks.Task<CuaHangDTDD.ServiceReferenceSanPham.SanPham[]> findAllAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceSanPham/find", ReplyAction="http://tempuri.org/IServiceSanPham/findResponse")]
        CuaHangDTDD.ServiceReferenceSanPham.SanPham find(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceSanPham/find", ReplyAction="http://tempuri.org/IServiceSanPham/findResponse")]
        System.Threading.Tasks.Task<CuaHangDTDD.ServiceReferenceSanPham.SanPham> findAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceSanPham/insert", ReplyAction="http://tempuri.org/IServiceSanPham/insertResponse")]
        bool insert(string masp, string ten, string mota, int gia, bool active, int hang_sx);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceSanPham/insert", ReplyAction="http://tempuri.org/IServiceSanPham/insertResponse")]
        System.Threading.Tasks.Task<bool> insertAsync(string masp, string ten, string mota, int gia, bool active, int hang_sx);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceSanPham/delete", ReplyAction="http://tempuri.org/IServiceSanPham/deleteResponse")]
        bool delete(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceSanPham/delete", ReplyAction="http://tempuri.org/IServiceSanPham/deleteResponse")]
        System.Threading.Tasks.Task<bool> deleteAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceSanPham/update", ReplyAction="http://tempuri.org/IServiceSanPham/updateResponse")]
        bool update(int id, string masp, string ten, string mota, int gia, bool active, int hang_sx);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceSanPham/update", ReplyAction="http://tempuri.org/IServiceSanPham/updateResponse")]
        System.Threading.Tasks.Task<bool> updateAsync(int id, string masp, string ten, string mota, int gia, bool active, int hang_sx);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceSanPhamChannel : CuaHangDTDD.ServiceReferenceSanPham.IServiceSanPham, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceSanPhamClient : System.ServiceModel.ClientBase<CuaHangDTDD.ServiceReferenceSanPham.IServiceSanPham>, CuaHangDTDD.ServiceReferenceSanPham.IServiceSanPham {
        
        public ServiceSanPhamClient() {
        }
        
        public ServiceSanPhamClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ServiceSanPhamClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceSanPhamClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceSanPhamClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public CuaHangDTDD.ServiceReferenceSanPham.SanPham[] findAll() {
            return base.Channel.findAll();
        }
        
        public System.Threading.Tasks.Task<CuaHangDTDD.ServiceReferenceSanPham.SanPham[]> findAllAsync() {
            return base.Channel.findAllAsync();
        }
        
        public CuaHangDTDD.ServiceReferenceSanPham.SanPham find(int id) {
            return base.Channel.find(id);
        }
        
        public System.Threading.Tasks.Task<CuaHangDTDD.ServiceReferenceSanPham.SanPham> findAsync(int id) {
            return base.Channel.findAsync(id);
        }
        
        public bool insert(string masp, string ten, string mota, int gia, bool active, int hang_sx) {
            return base.Channel.insert(masp, ten, mota, gia, active, hang_sx);
        }
        
        public System.Threading.Tasks.Task<bool> insertAsync(string masp, string ten, string mota, int gia, bool active, int hang_sx) {
            return base.Channel.insertAsync(masp, ten, mota, gia, active, hang_sx);
        }
        
        public bool delete(int id) {
            return base.Channel.delete(id);
        }
        
        public System.Threading.Tasks.Task<bool> deleteAsync(int id) {
            return base.Channel.deleteAsync(id);
        }
        
        public bool update(int id, string masp, string ten, string mota, int gia, bool active, int hang_sx) {
            return base.Channel.update(id, masp, ten, mota, gia, active, hang_sx);
        }
        
        public System.Threading.Tasks.Task<bool> updateAsync(int id, string masp, string ten, string mota, int gia, bool active, int hang_sx) {
            return base.Channel.updateAsync(id, masp, ten, mota, gia, active, hang_sx);
        }
    }
}
